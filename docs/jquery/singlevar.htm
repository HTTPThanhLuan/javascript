<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Single var</title>
    <link rel="shortcut icon" href='../img/favicon.ico' />
    <link href='../css/bootstrap.css' rel="stylesheet" />
    <link href='../css/app.css' rel="stylesheet" />
    <link href='../css/google-code-prettify/prettify.css' rel="stylesheet" />

    <script src='../js/jquery.js' type="text/javascript" ></script>
    <script src='../js/bootstrap.js' type="text/javascript" ></script>
    <script src='../js/app.js' type="text/javascript" ></script>

    <script src='../css/google-code-prettify/prettify.js' type="text/javascript"></script>
</head>
<body>
     <div class="navbar">
      <div class="navbar-inner">
        <div class="container">
          <a class="brand" style="padding-top:15px;" href='../index.htm'><img src='../img/js.png' alt="js" width="32" height="30" />
              &nbsp; JavaScript + jQuery Design Pattern Framework <sup>TM</sup>&nbsp; 2013
          </a>
        </div>
      </div>
    </div>

    <div class="container">
     <div class="row">
            <div class="span12" style="height:4px;background:mediumturquoise;"></div>
     </div>

     <div class="row">
       <div class="span12">
         <ul class="breadcrumb">
           <li><a href='../index.htm'>Home</a> <span class="divider">/</span></li>
           <li><a href='_index.htm'>jQuery</a> <span class="divider">/</span></li>
           <li class="active">Single var</li>
         </ul>
        </div>
      </div>
      <br />
        

<div class="row">
    <div class="span10">

        <div class="row">
            <div class="span7" style="padding: 0px 0 0 0;">
                <h2 class="h1title">Single var</h2>
                <p>
                  Declares and initializes all function variables with a single var.<br /><br />
                  The jQuery authors follow the Single var Pattern religiously.  There are no exceptions.
                </p>
            </div>
            <div class="span3">
                &nbsp;&nbsp;&nbsp;<a class='js' href="javascript:void(0);" onclick="return openPdf('jQueryPatterns');">jQuery Patterns Guide</a>
            </div>
        </div>
       
    </div>
    <div class="span2">
        <img src="../img/jspatterndetail.jpg" style="width:140px;height:140px;" alt="" />
        <br />
        <div class="back" style="padding:10px 0 0 18px;">
            <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='_index.htm' >back to list</a>
        </div>
    </div>
</div>
<hr />
<br />

<div class="row">
   <div class="span10">
      <h3>Overview</h3>
      <br />
      <div class="ptext">
<p>
The first line within the module's function body is single var followed by about 2 dozen variable declarations and initializations.  This is the Single var Pattern.  
</p>
<pre class="prettyprint">
(function (window, undefined) {
var
    rootjQuery,
    readyList,

    document = window.document,
    location = window.location,
    navigator = window.navigator,

    _jQuery = window.jQuery,
    _$ = window.$,

    core_push = Array.prototype.push,
    core_slice = Array.prototype.slice,
    core_indexOf = Array.prototype.indexOf,
    core_toString = Object.prototype.toString,
    core_hasOwn = Object.prototype.hasOwnProperty,
    core_trim = String.prototype.trim,

    // more ...

})( window );

</pre>
<p>
As you know variables get hoisted to the top, which can lead to unexpected results. 
The Single var pattern states that all variables in a function should be declared, and possibly initialized, by a single var at the beginning of the function body.  
The jQuery authors strictly adhere to this rule with only one var in each function. 
</p>
<p>
Unfortunately, strictly enforcing the Single var pattern can sometimes lead to code that seems contrived and unnatural; take a look at jQuery's grep method: 
</p>
<pre class="prettyprint">
grep: function( elems, callback, inv ) {
    var retVal,
        ret = [],
        i = 0,
        length = elems.length;

        inv = !!inv;
        // Go through the array, only saving the items
        // that pass the validator function
        for ( ; i < length; i++ ) {
            retVal = !!callback( elems[ i ], i );
            if ( inv !== retVal ) {
                 ret.push( elems[ i ] );
            }
        }

        return ret;
}
</pre>
<p>
Here we have a single var with four variables, three of which are initialized.  
In the middle of this function is a for loop that seems incomplete because the variables <span class="cd">i</span> and <span class="cd">length</span> 
are already defined and initialized at the top.  You see these kinds of for loops throughout the library. 
</p>
<p>
We prefer to have the looping variables declared and initialized where they are used (right in your face, so to speak) without having to guess whether 
<span class="cd">i</span> or <span class="cd">length</span> exist and/or have been initialized. Doing it this way would change the code to this: 
</p>

<pre class="prettyprint">
grep: function( elems, callback, inv ) {
    var retVal,
        ret = []; 

        inv = !!inv;
        // Go through the array, only saving the items
        // that pass the validator function
        for (var i = 0, length = elems.length; i < length; i++ ) {
            retVal = !!callback( elems[ i ], i );
            if ( inv !== retVal ) {
                 ret.push( elems[ i ] );
            }
        }

        return ret;
}
</pre>
<p>
We think this code makes its intentions more clear (i.e. more in your face).  
</p>

      </div> 
  </div>
</div>

<br />
<br />
<div class="row">
    <div class="span4 offsethalf">
        <i class="icon-hand-left" style="margin:2px 0 0 0;"></i>&nbsp;&nbsp;<a href='module.htm'>Module</a>

    </div>
    <div class="span3">
        <a href='doubleexclamation.htm'>Double Exclamation</a>&nbsp;&nbsp;<i class="icon-hand-right" style="margin:2px 0 0 0;"></i>
    </div>
</div>
<br />
<br />




      <br /><br />

      <hr />
      <div class="footer">
        <p class="pull-right"><a id="totop" href="#">Back to top</a></p>
        <p style="font-size:11pt;">Copyright &#169; 2013. Data & Object Factory, LLC. www.dofactory.com. All rights reserved.</p>
      </div>
      <br />
   </div>

<script type="text/javascript">

    $(function() {
        prettyPrint();

        // animates page to scroll to top
        $('#totop').on('click', function () {
            $("html, body").animate({ scrollTop: 0 }, 500);
            return false;
        });
    });

</script>
</body>
</html>
